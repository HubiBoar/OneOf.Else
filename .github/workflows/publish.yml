# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  NuGetDirectory: ${{ github.workspace}}/nuget
  PackageVersion: ${{ github.event.release.tag_name}}
  RepositoryUrl: ${{ github.server_url }}/${{ github.repository }}
  PackageProjectUrl: ${{ github.server_url }}/${{ github.repository }}
  PackageLicenseFile: ../../LICENSE
  PackageReadmeFile: ../../README.md
  Authors: Hubert Dzikuc
  Title: OneOf Extensions
  Description: OneOf Extensions
  PackageTags: discriminated unions, match switch, oneof, extensions, library

defaults:
  run:
    working-directory: ./OneOf.Else

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Run tests
      run: dotnet test --configuration Release

  deploy:
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [ test ]
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - run: |
          dotnet pack
          --configuration Release
          --output ${{ env.NuGetDirectory }}
          -p:PackageVersion=${{ env.PackageVersion }}
          -p:PackageProjectUrl=${{ env.PackageProjectUrl }}
          -p:RepositoryType=git
          -p:RepositoryUrl=${{ env.RepositoryUrl }}
          -p:PackageLicenseFile=${{ env.PackageLicenseFile }}
          -p:PackageReadmeFile=${{ env.PackageReadmeFile }}
          -p:Authors=${{ env.Authors }}
          -p:Title=${{ env.Title }}
          -p:Description=${{ env.Description }}
          -p:PackageTags=${{ env.PackageTags }}

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: dotnet nuget push ${{ env.NuGetDirectory }} --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json